---

- name: Deployment - FULL - ShipMe
  vars_files:
    - vars/sec_vars.yml
    - "{{ constants }}/aws_template_vars.yml"
    - vars/deployment_vars.yml
    - vars/instance_vars.yml
  hosts: localhost
  gather_facts: false
  tasks:
    - name: import new key task key_pair
      import_tasks:
        file: tasks/key_pair.yml

    - name: Require Subnet
      import_tasks:
        file: tasks/create_subnet.yml

    - name: Record Subnet Allocation
      import_tasks:
        file: tasks/subnet_allocation_record.yml

    - name: Require Security Group
      import_tasks:
        file: tasks/aws_security_group.yml

    - name: Check role info
      community.aws.iam_role:
        name: "{{ iam_role }}"
      register: role_result
      ignore_errors: true

    - name: Create IAM assume Role
      community.aws.iam_role:
        name: "{{ iam_role }}"
        assume_role_policy_document: "{{ lookup('file','files/assume_iam_role.json') }}"
        description: Role for EC2 Instances
        state: present
        tags:
          rb_type: role
          product: "{{ product_tag }}"
          environment: "{{ new_env }}"
      register: iam_role_info
    - debug:
        msg: "{{ iam_role_info }}"

    - name: Shell timestamp for unique profile name
      shell: |
        echo $(date '+%Y%m%d-%H%M%s')
      register: time_stamp

    - name: Instance Profile - Create
      ansible.builtin.command: aws iam create-instance-profile
        --instance-profile-name "{{ instance_profile }}-{{ time_stamp.stdout }}"
      ignore_errors: true

    - name: Create Policy
      amazon.aws.iam_policy:
        iam_type: role
        iam_name: "{{ iam_role }}"
        policy_name: "{{ policy_name }}"
        policy_json: "{{ lookup('file','../scripts/001-ai-trainer.json') }}"
        state: present
      register: iam_policy_info
    - debug:
        msg: "{{ iam_policy_info }}"

    - name: Attach Role to Instance Profile
      ansible.builtin.command: aws iam add-role-to-instance-profile
        --role-name "{{ iam_role }}"
        --instance-profile-name "{{ instance_profile }}-{{ time_stamp.stdout }}"
      ignore_errors: true

    - name: New  Instance "{{ inst_name }}"
      amazon.aws.ec2_instance:
        name: "{{ inst_name }}"
        key_name: "{{ key_name }}"
        iam_instance_profile: "{{ instance_profile }}-{{ time_stamp.stdout }}"
        vpc_subnet_id: "{{ subnet_info['subnet']['id'] }}"
        instance_type: "{{ ins_type }}"
        security_groups: 
          - "{{ sg }}"
        network:
          assign_public_ip: true
        image_id: "{{ deb12_base  }}"
        tags:
          Name: "{{ tags_name }}"
          environment: "{{ new_env }}"
          product: "{{ product_tag }}"
          purpose: "{{ host_purpose }}"
        state: running
        wait: true
      register: ec2
    - debug:
        msg: "{{ ec2 }}"

    - name: Register instance in ad-hoc groups
      add_host: 
        hostname: "{{ ec2['instances'][0]['network_interfaces'][0]['association']['public_ip'] }}" 
        groups: 
          - ec2hosts
          - ai_wrk
          
    - name: Add HF Data Disk
      import_tasks:
        file: tasks/create_volume.yml

    - name: Create DNS A record for web
      amazon.aws.route53:
        state: present
        overwrite: true
        zone: "{{ dns_zone }}"
        record: "{{ hf_host_fqdn }}"
        type: A
        ttl: 7200
        value: "{{ ec2['instances'][0]['network_interfaces'][0]['association']['public_ip'] }}"
        tags:
          environment: "{{ new_env }}"
          rb_type: dns_record
          product: "{{ product_tag }}"
      ignore_errors: true
      register: dns_ait
    - debug:
        msg: "{{ dns_ait }}"

    - name: Update deployment inventory.yml
      shell: |
        /usr/bin/php "{{ dep_home }}"/scripts/update_inventory.php "{{ groups }} {{ dep_home }}"
      ignore_errors: true
      register: php_output
    - debug:
        msg: "{{ php_output }}"

    - name: Deployment Vars Log task
      import_tasks:
        file: tasks/record_deployment_vars.yml 

- name: Basic debian server setup
  ansible.builtin.import_playbook: debian_server_setup.yml

- name: Run Extras
  ansible.builtin.import_playbook: run_extras.yml




